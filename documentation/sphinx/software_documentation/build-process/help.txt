waf [commands] [options]

Main commands (example: ./waf build -j4)
  build                 : executes the build
  build_all             : builds all parts of the project (binaries and documentation)
  build_libs            : executes the build of libs
  build_primary         : executes the build of primary
  build_primary_bare    : executes the build of primary_bare
  build_secondary       : executes the build of secondary
  build_secondary_bare  : executes the build of secondary_bare
  clean                 : cleans the project
  clean_all             : cleans all parts of the project
  clean_libs            : cleans the project libs
  clean_primary         : cleans the project primary
  clean_primary_bare    : cleans the project primary_bare
  clean_secondary       : cleans the project secondary
  clean_secondary_bare  : cleans the project secondary_bare
  configure             : configures the project
  cpplint               : configures cpplint
  dist                  : creates an archive containing the project source code
  distcheck             : creates tar.bz form the source directory and tries to run a build
  distclean             : removes build folders and data
  doxygen               : creates doxygen documentation
  doxygen_libs          : creates the doxygen documentation of libs
  doxygen_primary       : creates the doxygen documentation of primary
  doxygen_primary_bare  : creates the doxygen documentation of primary_bare
  doxygen_secondary     : creates the doxygen documentation of secondary
  doxygen_secondary_bare: creates the doxygen documentation of secondary_bare
  flake8                : runs flake8 on the foxBMS repository
  list                  : lists the targets to execute
  list_libs             : lists the targets to execute for libs
  list_primary          : lists the targets to execute for primary
  list_primary_bare     : lists the targets to execute for primary_bare
  list_secondary        : lists the targets to execute for secondary
  list_secondary_bare   : lists the targets to execute for secondary_bare
  sphinx                : creates the sphinx documentation of the project
  step                  : executes tasks in a step-by-step fashion, for debugging
  step_libs             : executes tasks in a step-by-step fashion, for debugging of libs
  step_primary          : executes tasks in a step-by-step fashion, for debugging of primary
  step_primary_bare     : executes tasks in a step-by-step fashion, for debugging of primary_bare
  step_secondary        : executes tasks in a step-by-step fashion, for debugging of secondary
  step_secondary_bare   : executes tasks in a step-by-step fashion, for debugging of secondary_bare

Options:
  --version             show program's version number and exit
  -c COLORS, --color=COLORS
                        whether to use colors (yes/no/auto) [default: auto]
  -j JOBS, --jobs=JOBS  amount of parallel jobs (8)
  -k, --keep            continue despite errors (-kk to try harder)
  -v, --verbose         verbosity level -v -vv or -vvv [default: 0]
  --zones=ZONES         debugging zones (task_gen, deps, tasks, etc)
  -h, --help            show this help message and exit
  --cpplint-conf-file=CPPLINT_CONF
                        cpplint configuration file (default: cpplint.yml)
  -t TARGET, --target=TARGET
                        build target: debug (default)/release
  -l LIBS, --libs=LIBS  name of the library to be used

  Configuration options:

  Build and installation options:
    -p, --progress      -p: progress bar; -pp: ide output

  Step options:
    --files=FILES       files to process, by regexp, e.g. "*/main.c,*/test/main.o"

  Installation and uninstallation options:
    --distcheck-args=ARGS
                        arguments to pass to distcheck
